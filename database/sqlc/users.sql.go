// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        first_name,
        last_name,
        email,
        phone_number,
        password,
        role_id
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, first_name, last_name, email, phone_number, password, role_id, created_at, updated_at
`

type CreateUserParams struct {
	FirstName   string `db:"first_name" json:"first_name"`
	LastName    string `db:"last_name" json:"last_name"`
	Email       string `db:"email" json:"email"`
	PhoneNumber string `db:"phone_number" json:"phone_number"`
	Password    string `db:"password" json:"password"`
	RoleID      int32  `db:"role_id" json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.Password,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, phone_number, password, role_id, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, email, phone_number, password, role_id, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsersWithPetsPaginated = `-- name: GetUsersWithPetsPaginated :many
SELECT u.id AS user_id,
    u.first_name,
    u.last_name,
    u.email,
    u.phone_number,
    p.id AS pet_id,
    p.name AS pet_name,
    p.birth_date AS pet_birth_date,
    s.name AS species_name,
    b.name AS breed_name
FROM users u
    LEFT JOIN pets p ON p.owner_id = u.id
    LEFT JOIN species s ON p.species_id = s.id
    LEFT JOIN breeds b ON p.breed_id = b.id
ORDER BY u.created_at DESC
LIMIT $1 OFFSET $2
`

type GetUsersWithPetsPaginatedParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type GetUsersWithPetsPaginatedRow struct {
	UserID       int32       `db:"user_id" json:"user_id"`
	FirstName    string      `db:"first_name" json:"first_name"`
	LastName     string      `db:"last_name" json:"last_name"`
	Email        string      `db:"email" json:"email"`
	PhoneNumber  string      `db:"phone_number" json:"phone_number"`
	PetID        pgtype.Int4 `db:"pet_id" json:"pet_id"`
	PetName      pgtype.Text `db:"pet_name" json:"pet_name"`
	PetBirthDate pgtype.Date `db:"pet_birth_date" json:"pet_birth_date"`
	SpeciesName  pgtype.Text `db:"species_name" json:"species_name"`
	BreedName    pgtype.Text `db:"breed_name" json:"breed_name"`
}

func (q *Queries) GetUsersWithPetsPaginated(ctx context.Context, arg GetUsersWithPetsPaginatedParams) ([]GetUsersWithPetsPaginatedRow, error) {
	rows, err := q.db.Query(ctx, getUsersWithPetsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersWithPetsPaginatedRow
	for rows.Next() {
		var i GetUsersWithPetsPaginatedRow
		if err := rows.Scan(
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.PhoneNumber,
			&i.PetID,
			&i.PetName,
			&i.PetBirthDate,
			&i.SpeciesName,
			&i.BreedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
update users
SET first_name = $1,
    last_name = $2,
    email = $3,
    phone_number = $4,
    role_id = $5
WHERE id = $6
RETURNING id, first_name, last_name, email, phone_number, password, role_id, created_at, updated_at
`

type UpdateUserParams struct {
	FirstName   string `db:"first_name" json:"first_name"`
	LastName    string `db:"last_name" json:"last_name"`
	Email       string `db:"email" json:"email"`
	PhoneNumber string `db:"phone_number" json:"phone_number"`
	RoleID      int32  `db:"role_id" json:"role_id"`
	ID          int32  `db:"id" json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.RoleID,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.PhoneNumber,
		&i.Password,
		&i.RoleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
