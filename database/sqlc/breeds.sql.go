// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: breeds.sql

package database

import (
	"context"
)

const createBreed = `-- name: CreateBreed :one
INSERT INTO breeds (name, species_id)
VALUES ($1, $2)
RETURNING id, name, species_id, created_at, updated_at
`

type CreateBreedParams struct {
	Name      string `db:"name" json:"name"`
	SpeciesID int32  `db:"species_id" json:"species_id"`
}

func (q *Queries) CreateBreed(ctx context.Context, arg CreateBreedParams) (Breed, error) {
	row := q.db.QueryRow(ctx, createBreed, arg.Name, arg.SpeciesID)
	var i Breed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SpeciesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllBreedsPaginated = `-- name: GetAllBreedsPaginated :many
SELECT id, name, species_id, created_at, updated_at
FROM breeds
ORDER BY name
LIMIT $1 OFFSET $2
`

type GetAllBreedsPaginatedParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetAllBreedsPaginated(ctx context.Context, arg GetAllBreedsPaginatedParams) ([]Breed, error) {
	rows, err := q.db.Query(ctx, getAllBreedsPaginated, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Breed
	for rows.Next() {
		var i Breed
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SpeciesID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBreedByID = `-- name: GetBreedByID :one
SELECT id, name, species_id, created_at, updated_at
FROM breeds
WHERE id = $1
`

func (q *Queries) GetBreedByID(ctx context.Context, id int32) (Breed, error) {
	row := q.db.QueryRow(ctx, getBreedByID, id)
	var i Breed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SpeciesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBreed = `-- name: UpdateBreed :one
UPDATE breeds
SET name = $1,
    species_id = $2,
    updated_at = NOW()
WHERE id = $3
RETURNING id, name, species_id, created_at, updated_at
`

type UpdateBreedParams struct {
	Name      string `db:"name" json:"name"`
	SpeciesID int32  `db:"species_id" json:"species_id"`
	ID        int32  `db:"id" json:"id"`
}

func (q *Queries) UpdateBreed(ctx context.Context, arg UpdateBreedParams) (Breed, error) {
	row := q.db.QueryRow(ctx, updateBreed, arg.Name, arg.SpeciesID, arg.ID)
	var i Breed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SpeciesID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
